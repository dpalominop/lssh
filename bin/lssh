#!/usr/bin/env python
#
#  Copyright (C) 2017-2018 Daniel Palomino (@dpalominop) <dapalominop@gmail.com>
#
#  This file is part of lssh
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.

""" calls lssh function """

import os
import sys
from getpass import getpass
from src.checkconfig import CheckConfig
from src.lssh import lssh
#from src.lssh import lssh, LshellTimeOut


def main():
    """ main function """

    args={
        'username':'',
        'port':22,
        'hostname':''
    }
    if len(sys.argv) > 1:
        args['hostname'] = sys.argv[1]
        if args['hostname'].find('@') >= 0:
            args['username'], args['hostname'] = args['hostname'].split('@')
    else:
        args['hostname'] = input('Hostname: ')
    if len(args['hostname']) == 0:
        print('*** Hostname required.')
        sys.exit(1)

    port = 22
    if args['hostname'].find(':') >= 0:
        args['hostname'], portstr = args['hostname'].split(':')
        args['port'] = int(portstr)
    print args
    # set SHELL and get LSSH_ARGS env variables
    ##os.environ['SHELL'] = os.path.realpath(sys.argv[0])

    ##if 'LSSH_ARGS' in os.environ:
    ##    args = sys.argv[1:] + eval(os.environ['LSSH_ARGS'])
    ##else:
    ##    args = sys.argv[1:]

    #password = getpass(prompt=args[0] + ' password: ')

    #args=username+'@'+hostname+':'+str(port)
    #args=''
    userconf = CheckConfig('').returnconf()

    ssh = lssh(userconf, args)


    if ssh.startConnection():
        ssh.openShell()

        try:
            ssh.shell_loop()
        except (KeyboardInterrupt, EOFError, SystemExit):
            sys.stdout.write('\nExited on user request\n')
            sys.exit(0)
        #except LshellTimeOut:
        #    userconf['logpath'].error('Timer expired')
        #    sys.stdout.write('\nTime is up.\n')

if __name__ == '__main__':
    main()
